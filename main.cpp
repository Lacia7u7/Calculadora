#include "main.h"
#include <iostream>
#include <vector>
#include <pthread.h>
#include <fstream>
#include "CNumber.h"
#include "string_utilities.h"
#include "queue"
#include "map"
#include "ArithmeticError.h"
#include <cmath>
#include <complex>
#include <algorithm>
#include <regex>
#define FILE_NOT_OPENED -1;
using namespace std;
static int workingThreads;
static vector<string> functions_names;
static vector<string> basic_operations;


int main() {
    initializeApp();//*((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i,   tan{d,50}*tan{r,50}*cos{d,50}*cos{r,0.5*(10+2-2)}*sen{d,1/2}*sen{r,3/4*3.1416}
    /*string string1="(1+(log{i+2,i}*log{10,2*log{10,5+6*3+log{10,i}*log{10,2*log{10,5+6*3}}}})-(log{i+2,i}*log{10,2*log{10,5+6*3+log{10,i}*log{10,2*log{10,5+6*3}}}}))";
    string string2="(tan{r,0.52}/sen{r,0.32})*(((tan{d,50}*tan{r,50}*cos{d,50}*cos{r,0.5*(10+2-2)}*sen{d,1/2}*sen{r,3/4*3.1416})))";
    string string3 = "((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2))";
    string string4="(1+(log{i+2,i}*log{10,2*log{10,5+6*3+log{10,i}*log{10,2*log{10,5+6*3}}}})-(log{i+2,i}*log{10,2*log{10,5+6*3+log{10,i}*log{10,2*log{10,5+6*3}}}}))*((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))";
    //CNumber *pNumber1 = computeExpression(string1);
    //CNumber *pNumber2 = computeExpression(string2);
    //CNumber *pNumber3 = computeExpression(string3);
    CNumber *pNumber4 = computeExpression(string4);
    //CNumber res = *pNumber1**pNumber2**pNumber3;*/
    //string string1 = "(1+(log{i+2,i}*log{10,2*log{10,5+6*3+log{10,i}*log{10,2*log{10,5+6*3}}}})-(log{i+2,i}*log{10,2*log{10,5+6*3+log{10,i}*log{10,2*log{10,5+6*3}}}}))*((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+(1+(log{i+2,i}*log{10,2*log{10,5+6*3+log{10,i}*log{10,2*log{10,5+6*3}}}})-(log{i+2,i}*log{10,2*log{10,5+6*3+log{10,i}*log{10,2*log{10,5+6*3}}}}))*((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+(1+(log{i+2,i}*log{10,2*log{10,5+6*3+log{10,i}*log{10,2*log{10,5+6*3}}}})-(log{i+2,i}*log{10,2*log{10,5+6*3+log{10,i}*log{10,2*log{10,5+6*3}}}}))*((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+(1+(log{i+2,i}*log{10,2*log{10,5+6*3+log{10,i}*log{10,2*log{10,5+6*3}}}})-(log{i+2,i}*log{10,2*log{10,5+6*3+log{10,i}*log{10,2*log{10,5+6*3}}}}))*((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))+((((-tan{r,50}/sen{r,50}+((1)(5)*(tan{r,1.5}*tan{r,1.5}*sen{r,1.5}*sen{r,1.5}*sen{r,cos{r,1.2}*cos{r,10 + 1/2 + 3/4 + 8/7 + 1/tan{r,2 + 3*6}} + 100})(((0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(569+32i*31i/2+3+(5+(5)+(5+(5+5*(4+7/2+8/2+9/(24*2+(8)))))))+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)+(0-5*(-5)*(((5+2i)^(4+3i))((5+3)*2*(5+(5+2+(5+2+(5+2))))/(2*2))*2+2+8+9+9i)/(2+3i)+585674+32i-4/2+3/2)))*(tan{r,0.52}/sen{r,0.32})*(((tan{r,50}*tan{r,50}*cos{r,50}*cos{r,0.5*(10+2-2)}*sen{r,1/2}*sen{r,3/4*3.1416}))))+5430423.0705899996683-1160614.07160799996927i+tan{r,50}/sen{r,50}))))";
    string stringP="((5+3)";
    CNumber compute= *computeExpression(stringP);
    cout<<"Evaluador de expresiones matematicas\n";
    cout<<"Cuantos archivos desea evaluar?:\n";
    int nFiles=0;
    cin>>nFiles;
    getchar();
    vector<string> paths;
    workingThreads=0;
    pthread_t pthreadFile;
    for (int i = 0; i < nFiles; ++i) {
        cout<<"Ruta "<<(i+1)<<": \n";
        paths.emplace_back("");
        getline(cin,paths[i],'\n');
        workingThreads++;
        int error= pthread_create(&pthreadFile, nullptr, evaluateFile, (void *) &paths[i]);
        if (error){
            cout<<"Error interno, el archivo no podra procesarse";
            workingThreads=0;
            return -1;
        }
        pthread_join(pthreadFile, nullptr);
    }
    return 0;
}

void initializeApp() {
    functions_names.emplace_back("log");
    functions_names.emplace_back("sen");
    functions_names.emplace_back("cos");
    functions_names.emplace_back("tan");
    basic_operations.emplace_back("^");
    basic_operations.emplace_back("+");
    basic_operations.emplace_back("-");
    basic_operations.emplace_back("*");
    basic_operations.emplace_back("/");
}
bool findIn(vector<string> data, const string& toFind){
    return std::find(data.begin(), data.end(), toFind) != data.end();
}
bool findIn(vector<string> data, const char & toFind){
    return std::find(data.begin(), data.end(), to_string(toFind)) != data.end();
}
bool findIn(vector<int> data, const int & toFind){
    return std::find(data.begin(), data.end(),toFind) != data.end();
}
string extractSubstring(string basicString,int initialPos,char leftDelimeter,char rightDelimeter){
    int indexLeftDelimeter=basicString.find(leftDelimeter,initialPos);
    int indexRightDelimeter=-1;
    int countLeftDel=indexLeftDelimeter>=0?1:-1;
    string substring;
    for (int i = indexLeftDelimeter+1; i < basicString.size(); ++i) {
        if(basicString[i]==leftDelimeter){
            countLeftDel++;
        }else if(basicString[i]==rightDelimeter){
            countLeftDel--;
        }
        if(countLeftDel==0){
            indexRightDelimeter=i;
            break;
        }
    }
    if(indexLeftDelimeter!=-1 && indexRightDelimeter!=-1) {
        return basicString.substr(indexLeftDelimeter+1, indexRightDelimeter-indexLeftDelimeter-1);
    }else{
        return "";
    }
}
std::vector<std::string> extractParams(string basicString){
    vector<string> params;
    string currentParam;
    string substring;
    for (int i = 0; i < basicString.size(); ++i) {
        if(basicString[i]==','){
            params.emplace_back(currentParam);
            currentParam="";
        }else if(basicString[i]=='('){
            substring= extractSubstring(basicString, i, '(', ')');
            currentParam.append("(").append(substring).append(")");
            i+=substring.size()+1;
        }else if(basicString[i]=='{'){
            substring= extractSubstring(basicString, i, '{', '}');
            currentParam.append("{").append(substring).append("}");
            i+=substring.size()+1;
        }else{
            currentParam.push_back(basicString[i]);
        }
    }
    params.emplace_back(currentParam);
    return params;
}
int findLastIndex(const string& basicString, int fromIndex,const string& toFind, int repetitions){
    int index = basicString.find(toFind, fromIndex);
    int tmpIndex;
    while (repetitions>0 && index>=0){
        tmpIndex=basicString.find(toFind,index+1);
        repetitions--;
        if(tmpIndex==-1){
            return index;
        }else{
            index=tmpIndex;
        }
    }
    return index;
}
string validateScope(const string &basicString) {
    int openedParenthesis=0;//()
    int openedParams=0;//{}
    int errorIndex=-1;
    for (const char &charr : basicString){
        errorIndex++;
        if(charr=='('){
            openedParenthesis++;
        }else if(charr==')'){
            openedParenthesis--;
        }else if(charr=='{'){
            openedParams++;
        }else if(charr=='}'){
            openedParams--;
        }
        if(openedParenthesis<0){
            break;
        }else if(openedParams<0){
            break;
        }
    }
    if(openedParams!=0 || openedParenthesis!=0){
        string res;
        res.append("Revisando Parentesis y Llaves en: ").append(basicString).append("\n");
        if(openedParenthesis>0){
            res.append("Falta ").append(to_string(openedParenthesis)).append(" parentesis de cierre ')'\n");
        }else if(openedParenthesis<0){
            res.append("Sobran ").append(to_string(openedParenthesis)).append(" parentesis de cierre ')'\n");
        }
        if(openedParams>0){
            res.append("Falta ").append(to_string(openedParenthesis)).append(" llaves de cierre '}'\n");
        }else if(openedParams<0){
            res.append("Sobran ").append(to_string(openedParenthesis)).append(" llaves de cierre '}'\n");
        }
        res.append("Expresion con el error:\n");
        res.append(basicString);
        res.append("\n");
        for (int i = 0; i < errorIndex+1; ++i) {
            res.append(" ");
        }
        res.append("^");
        return res;
    }
    return "";
}

string validateSymbols(const string &basicString){
    if(basicString.empty()){
        return "";
    }
    string error="";
    for (int i = 0; i < basicString.size()-1; ++i) {
        if(findIn(basic_operations,basicString[i]) && findIn(basic_operations,basicString[i+1])){
            error.append("Revisando Operaciones en: ").append(basicString).append("\n");
            error.append("Error con operaciones seguidos: ").append(to_string(basicString[i])).append(to_string(basicString[i+1])).append("\n");
            error.append(basicString).append("\n");
            for (int j = 0; j < i + 1; ++j) {
                error.append(" ");
            }
            error.append("^\n\n");
        }
    }
    if(basicString[basicString.size()-1]=='+' || basicString[basicString.size()-1]=='-'){
        error.append("Revisando Signos en: ").append(basicString).append("\n");
        error.append("Error con signo al final de la expresion: ").append(to_string(basicString[basicString.size()+1])).append("\n\n");
    }
    int index=basicString.find("..");
    if (index>=0){
        error.append("Revisando Sintaxis en: ").append(basicString).append("\n");
        error.append("Error con doble punto: ..\n");
        error.append(basicString).append("\n");
        for (int j = 0; j < index + 1; ++j) {
            error.append(" ");
        }
        error.append("^\n\n");
    }
    return error;
}
/**
 * First call validateSyntax
 * @param basicString
 * @return
 */
std::string fixUp(const string &basicString,const CalculatorError& stackError){
    string res;
    res.append(basicString);
    res=regex_replace(res,regex("\\)\\("),")*(");
    res=regex_replace(res,regex("(\\d)\\("),"$1*(");
    res=regex_replace(res,regex("\\)(\\d)"),")*$1");
    int index=res.find("/-");
    while (index>=0){
        string nestedNumber= detectANumberWithoutSign(res, index + 2,stackError);
        res.replace(index+1,nestedNumber.size(),nestedNumber.insert(0,"(-").append(")"));
        index=res.find("/-");
    }
    index=res.find("*-");
    while (index>=0){
        string nestedNumber= detectANumberWithoutSign(res, index + 2,stackError);
        res.replace(index+1,nestedNumber.size(),nestedNumber.insert(0,"(-").append(")"));
        index=res.find("*-");
    }
    ///////
    index=res.find("/+");
    while (index>=0){
        string nestedNumber= detectANumberWithoutSign(res, index + 2,stackError);
        res.replace(index+1,nestedNumber.size(),nestedNumber.insert(0,"(").append(")"));
        index=res.find("/+");
    }
    index=res.find("*+");
    while (index>=0){
        string nestedNumber= detectANumberWithoutSign(res, index + 2,stackError);
        res.replace(index+1,nestedNumber.size(),nestedNumber.insert(0,"(").append(")"));
        index=res.find("*+");
    }
    if(res[0]=='-'){
        res.insert(0,"0");
    }else if(res[0]=='+'){
        res.insert(0,"0");
    }
    //
    string withoutSpaces;
    for (int i = 0; i < res.size(); ++i) {
        if(res[i]!=' '){
            withoutSpaces.push_back(res[i]);
        }
    }
    return withoutSpaces;
}

string detectANumberWithoutSign(const string &basicString, int initialPos,CalculatorError calculatorError) {
    int points=0;
    string res;
    int lastIndex;
    for (lastIndex = initialPos; lastIndex < basicString.size(); ++lastIndex) {
        if(basicString[lastIndex] == '.'){
            if( points >=1){
                string error = "Hay mas de 2 puntos seguidos en: ";
                error.append(basicString);
                for (int i = 0; i < lastIndex; ++i) {
                    error.append(" ");
                }
                error.append("^");
                calculatorError.setError(error);
                throw error;
            }
            points++;
        }else if(!isdigit(basicString[lastIndex])){
            break;
        }
    }
    return basicString.substr(initialPos,lastIndex-initialPos);
}

string validateSyntax(const string &basicString) {
    const string &scopeValidation = validateScope(basicString);
    if(!scopeValidation.empty()){
        return scopeValidation;
    }
    const string &symbolValidation = validateSymbols(basicString);
    if(!symbolValidation.empty()){
        return symbolValidation;
    }
    return "";
}

void *evaluateFile(void * args){
    string *path=(string*)args;
    fstream file;
    file.open(path->data(),ios::in);
    if(file.fail()){
        cout<<"No se pudo abrir archivo con la ruta: "<<*path<<"\n";
        workingThreads--;
        throw "No se pudo abrir el archivo";
    }
    vector<string> expressions;

    int line=0;
    while (!file.eof()){
        expressions.emplace_back("");
        getline(file, expressions[line],'\n');
        line++;
    }
    line=0;
    ofstream out;
    out.open(path->append("_salida.txt"));
    for (auto &item : expressions){
        line++;
        CalculatorError stackError;
        string stack="Evaluando archivo: ";
        stack.append(path->c_str()).append("\n\t En la linea: ").append(to_string(line)).append(")");
        stackError.addToStack(stack);
        try {
            CNumber *pNumber = computeExpression(item, stackError);
            out<<*pNumber<<"\n";
        }catch(CalculatorError c){
            out<<"Error: Expresion\n";
        }catch (exception e){
            out<<"Error desconocido: Excepcion\n";
        }catch (string s){
            out<<"Error desconocido: String\n";
        }
    }
    file.close();
    return nullptr;
}

CNumber* computeExpression(string &basicString,CalculatorError stackError) {
    string stack="Call to computeExpression(";
    stack.append(basicString).append(")");
    stackError.addToStack(stack);
    string resultValidation= validateSyntax(basicString);
    if(!resultValidation.empty()){
        stackError.setError(resultValidation);
        throw stackError;
    }
    if(basicString.empty()){
        return CNumber::get0CNumber();
    }else{
        basicString= fixUp(basicString,stackError);
        //7*cos{r,pi}-5^2/3-2+14

        map<string,CNumber> mapAdress;
        //Find and reduce parenthesis
        int index = basicString.find('(');
        int sizeSubLevel=0;
        string subLevel;
        while (index>=0){
            subLevel= extractSubstring(basicString,0,'(',')');
            sizeSubLevel=subLevel.size();
            CNumber *pNumber = computeExpression(subLevel,stackError);
            string adress="@";
            adress.append(to_string(mapAdress.size()));
            adress.append("~");
            mapAdress[adress]=*pNumber;
            basicString.replace(index, sizeSubLevel+2, adress);
            index = basicString.find('(');
        }
        //Find and reduce functions {}
        int indexFun;
        for (const auto &item : functions_names){
            indexFun= findLastIndex(basicString, 0, item, INT32_MAX);
            sizeSubLevel=0;
            while (indexFun>=0){
                subLevel=extractSubstring(basicString,indexFun,'{','}');
                sizeSubLevel= subLevel.size();
                CNumber replaceResult=*executeParametrizedFun(item,subLevel,mapAdress,stackError);
                string adress="@";
                adress.append(to_string(mapAdress.size()));
                adress.append("~");
                mapAdress[adress]=replaceResult;
                unsigned long long int n = item.length() + sizeSubLevel+2;
                basicString.replace(indexFun, n, adress);
                indexFun=findLastIndex(basicString, 0, item, INT32_MAX);
            }
        }

        //solve last normal operations
        int opExecuted=0;
        CNumber result=*CNumber::get0CNumber();
        bool someOperationExecuted= false;
        for (int i = 0; i < basic_operations.size(); ++i) {
            string opName=basic_operations[i];
            vector<string> additions= *split(basicString, opName);
            if(basicString.find(opName) == -1){
                additions.clear();
                continue;
            }
            opExecuted++;
            someOperationExecuted=true;
            queue<string> opQueue;
            for (const auto &item : additions){
                opQueue.push(item);
            }
            int calculatedTimes=0;
            while (!opQueue.empty()){
                string front = opQueue.front().c_str();
                vector<string> params_arr={front};
                if(calculatedTimes==0 && opQueue.size()<2){
                    string error;
                    error.append("Expresion con el error:");
                    error.append("La cantidad de parametros debe ser mayor a 1: Operation: ").append(opName).append(" ,provided ").append("(").append(front).append(")").append("\n");;
                    stackError.setError(error);
                    throw stackError;
                }else if(opQueue.empty()){
                    continue;
                }
                if(calculatedTimes==0){
                    opQueue.pop();
                    params_arr={front,opQueue.front()};
                }else{
                    params_arr={result.toString(),opQueue.front()};
                }
                result=*executeNormalOperation(opName, params_arr,mapAdress,stackError);
                calculatedTimes++;
                opQueue.pop();;
            }
            break;
        }
        if(!someOperationExecuted){
            if(mapAdress.find(basicString)!=mapAdress.end()){
                result=mapAdress[basicString];
            }else{
                int i = basicString.find('i');
                if(i>=0 && basicString.length()==1){
                    basicString.insert(0,"1");// i sola: -> 1i
                    i++;
                }
                const string &number = detectANumberWithoutSign(basicString, 0, stackError);
                if(number.empty()){
                    string error;
                    error.append("Expresion con el error:\n");
                    error.append("No se pudo convertir a numero lo siguiente: ").append(basicString).append("\n");;
                    stackError.setError(error);
                    throw stackError;
                }
                if(i>=0){
                    basicString.erase(i);
                    result.setI(atof(basicString.data()));
                }else{
                    result.setR(atof(basicString.data()));
                }
            }
        }
        CNumber* resultToReturn=CNumber::get0CNumber();
        resultToReturn->setR(result.getR());
        resultToReturn->setI(result.getI());
        return resultToReturn;
    }
}
string paramsToFormat(vector<string> params,string delimeter){
    string res;
    if(params.empty()){
        return "";
    }
    for (int i = 0; i < params.size()-1; ++i) {
        res.append(params[i]).append(delimeter);
    }
    res.append(params[params.size()-1]);
    return res;
}

vector<string> &replaceMemoryAdress(vector<string> &params, const map<string, CNumber> &adresses, CalculatorError &stackError, const vector<int>& dontCompute) {
    for (int i = 0; i < params.size(); ++i) {
       if(findIn(dontCompute,i)){
           continue;
       }
        if(params[i].find('@')>=0) {
            int index = params[i].find('@');
            int indexLast = 0;
            string substring;
            while (index >= 0) {
                indexLast = params[i].find('~', index);
                substring=params[i].substr(index,indexLast-index+1);
                string str = adresses.at(substring).toString();
                str.insert(0,"(");
                str.append(")");
                params[i].replace(index, indexLast - index + 1, str);
                index=params[i].find('@');
            }
            params[i]= computeExpression(params[i],stackError)->toString();
        }
    }
    return params;
}
CNumber * executeNormalOperation(const string& functionName, vector<string> params, const map<string,CNumber>& adresses,CalculatorError stackError) {
    CNumber result=*CNumber::get0CNumber();
    params = replaceMemoryAdress(params, adresses, stackError);
    string stack="Call to executeNormalOperation(";
    stack.append(functionName).append(",").append(paramsToFormat(params,","));
    stack.append(")");
    stackError.addToStack(stack);
    try {
        if(functionName=="^"){
            if(params.size()!=2){
                string error;
                error.append("Expresion con el error:");
                error.append("\nLa cantidad de parametros debe ser 2: ").append(functionName).append(" provided ").append("(").append(paramsToFormat(params,",")).append(")").append("\n");;
                stackError.setError(error);
                throw stackError;
            }
            CNumber *baseCNumber = computeExpression(params[0],stackError);
            CNumber *expCNumber = computeExpression(params[1],stackError);
            complex<long double> base(baseCNumber->getR(),baseCNumber->getI());
            complex<long double> exp(expCNumber->getR(),expCNumber->getI());
            complex<long double> res= pow(base,exp);
            result.setR(res.real());
            result.setI(res.imag());
        }else if(functionName=="+"){
            for (int i = 1; i < params.size(); ++i) {
                result=result+ *computeExpression(params[i - 1],stackError) + *computeExpression(params[i],stackError);
            }
        }else if(functionName=="-"){
            for (int i = 1; i < params.size(); ++i) {
                result=result+ *computeExpression(params[i - 1],stackError) - *computeExpression(params[i],stackError);
            }
        }else {
            if(params.size()!=2){
                string error;
                error.append("Expresion con el error:");
                error.append("\nLa cantidad de parametros debe ser mayor a 1: ").append(functionName).append(" provided ").append("(").append(paramsToFormat(params,",")).append(")").append("\n");;
                stackError.setError(error);
                throw stackError;
            }
            if(functionName=="*"){
                for (int i = 1; i < params.size(); ++i) {
                    result= *computeExpression(params[i - 1],stackError) * *computeExpression(params[i],stackError);
                }
            }else if(functionName=="/"){
                for (int i = 1; i < params.size(); ++i) {
                    result= *computeExpression(params[i-1],stackError)/ *computeExpression(params[i],stackError);
                }
            }
            if(CNumber::isInvalidCNumber(&result)){
                ArithmeticError arithmeticError;
                string error;
                error.append("Operador: ").append(functionName).append(" , Data={").append(paramsToFormat(params,",")).append("}\n");
                stackError.setError(error);
                throw arithmeticError;
            }
        }
    } catch (CalculatorError &c) {
        stackError.setError(c.getError());
        throw stackError;
    }catch (ArithmeticError &a) {
        string error;
        error.append("Expresion con el error: ");
        error.append("Operador: ").append(functionName).append(" , Data={").append(paramsToFormat(params,",")).append("}\n");
        error.append("Verificar la viabilidad de la operacion\nError Aritmetico:").append(a.getError());
        stackError.setError(error);
        throw stackError;
    } catch (exception &e) {
        stackError.setError(e.what());
        throw stackError;
    }
    CNumber* resultToReturn=CNumber::get0CNumber();
    resultToReturn->setR(result.getR());
    resultToReturn->setI(result.getI());
    return resultToReturn;
}


CNumber *executeParametrizedFun(const string& functionName,string sublevel, const map<string,CNumber>& adresses,CalculatorError stackError){
    string stack="Call to executeParametrizedFun(";
    stack.append(sublevel).append(")");
    stackError.addToStack(stack);
    vector<string> params= extractParams(sublevel);
    CNumber* result=CNumber::get0CNumber();
    try {
        if(functionName=="log"){
            replaceMemoryAdress(params,adresses,stackError);
            CNumber base=*computeExpression(params[0]);
            CNumber n=*computeExpression(params[1]);
            if(params.size()!=2){
                string error;
                error.append("Expresion con el error:");
                error.append(functionName).append("{").append(sublevel).append("}\n");
                error.append("Verificar la cantidad de parametros y el formato: ").append(paramsToFormat(params,",")).append(" (numero complejo o real) , (numero complejo o real) )");
                stackError.setError(error);
                throw stackError;
            }
            complex<long double> baseC(base.getR(),base.getI());
            complex<long double> numC(n.getR(),n.getI());
            complex<long double> logN=log(numC);
            complex<long double> logBase=log(baseC);
            complex<long double> res=logN/logBase;
            result->setR(res.real())->setI(res.imag());
        }else{
            vector<int> dontCompute;
            dontCompute.push_back(0);
            replaceMemoryAdress(params,adresses,stackError,dontCompute);
            string angleUnit= params[0];
            string param1=params[1];
            if(angleUnit.length() != 1 || angleUnit[0] != 'd' && angleUnit[0] != 'r' || param1.length() == 0 || (param1.find('i') != std::string::npos && angleUnit[0]=='d') || params.size() != 2){
                string error;
                error.append("Expresion con el error:");
                error.append(functionName).append("{").append(paramsToFormat(params,",")).append("}\n");
                error.append("Verificar la cantidad de parametros y el formato: ").append(functionName).append(" (d o r) , (numero real o real|complejo si se usa 'r') )");
                stackError.setError(error);
                throw stackError;
            }//se quita la letra d o r
            CNumber paramN=*computeExpression(param1,stackError);
            complex<long double> paramToUse;
            if(angleUnit[0]=='d'){
                if(paramN.getI()!=0){
                    string error;
                    error.append("Expresion con el error:");
                    error.append(functionName).append("{").append(paramsToFormat(params,",")).append("}\n");
                    error.append("Verificar la cantidad de parametros y el formato: ").append(functionName).append(" (d o r) , (numero real o real|complejo si se usa 'r') )");
                    stackError.setError(error);
                    throw stackError;
                }
                paramToUse.real(paramN.getR());
            }else{
                paramToUse.real(paramN.getR());
                paramToUse.imag(paramN.getI());
            }
            if(functionName=="sen"){
                result->setR(sin(paramToUse).real());
                result->setI(sin(paramToUse).imag());
            }else if(functionName=="cos"){
                result->setR(cos(paramToUse).real());
                result->setI(cos(paramToUse).imag());
            }else if(functionName=="tan"){
                result->setR(tan(paramToUse).real());
                result->setI(tan(paramToUse).imag());
            }
        }
        if(CNumber::isInvalidCNumber(result)){
            ArithmeticError arithmeticError;
            string error;
            error.append(functionName).append("{").append(paramsToFormat(params,",")).append("}");
            arithmeticError.setError(error);
            throw arithmeticError;
        }
    } catch (CalculatorError &c) {
        stackError.setError(c.getError());
        throw stackError;
    }catch (ArithmeticError &a) {
        string error;
        error.append("Expresion con el error:");
        error.append(functionName).append("{").append(paramsToFormat(params,",")).append("}\n");
        error.append("Verificar la viabilidad de la operacion\nError Aritmetico:").append(a.getError());
        stackError.setError(error);
        throw stackError;
    } catch (exception &e) {
        stackError.setError(e.what());
        throw stackError;
    }
    return result;
}


